// Package codewriter is a simple helper for writing out source code.
package codewriter

import (
	"bytes"
	"fmt"
	"io"
	"sort"
	"strings"
)

type Writer struct {
	imports *[]string
	trailer []*Writer
	w       *bytes.Buffer
	pkg     string
	indent  string
}

func New(pkg string) *Writer {
	return &Writer{w: &bytes.Buffer{}, pkg: pkg, imports: &[]string{}}
}

// W writes a formatted string directly to the writer without indentation or newline.
func (c *Writer) W(format string, args ...interface{}) {
	fmt.Fprintf(c.w, format, args...)
}

// L writes a newline-terminated string to the writer.
func (c *Writer) L(format string, args ...interface{}) {
	c.W(c.indent+format+"\n", args...)
}

// In calls "fn" with a Writer that is indented one level.
func (c *Writer) In(fn func(w *Writer)) {
	fn(c.Push())
}

// Push returns a Writer indented one level.
func (c *Writer) Push() *Writer {
	out := *c
	out.indent += "  "
	return &out
}

// Pop returns a Writer unindented one level.
func (c *Writer) Pop() *Writer {
	out := *c
	out.indent = out.indent[:len(out.indent)-2]
	return &out
}

// Body returns the body of the code, without the package declaration and imports.
func (c *Writer) Body() string {
	out := &bytes.Buffer{}
	c.writeBody(out)
	return out.String()
}

// Import adds an import to the generated code.
func (c *Writer) Import(pkg ...string) {
	*c.imports = append(*c.imports, pkg...)
}

// Trailer returns a Writer that will be appended to the end of the code.
//
// Useful for writing out helper functions and other globals.
func (c *Writer) Trailer() *Writer {
	out := &Writer{imports: c.imports, w: &bytes.Buffer{}}
	c.trailer = append(c.trailer, out)
	return out
}

// String returns the self-contained complete generated code.
func (c *Writer) String() string {
	out := &strings.Builder{}
	c.write(out)
	return out.String()
}

// Bytes returns the self-contained complete generated code.
func (c *Writer) Bytes() []byte {
	out := &bytes.Buffer{}
	c.write(out)
	return out.Bytes()
}

//nolint:errcheck
func (c *Writer) write(w io.Writer) {
	fmt.Fprintf(w, "// Code generated by happy. DO NOT EDIT.\n")
	fmt.Fprintf(w, "package %s\n", c.pkg)
	fmt.Fprintf(w, "\n")
	imports := []string{}
	seen := map[string]bool{}
	for _, pkg := range *c.imports {
		if pkg == "" || seen[pkg] {
			continue
		}
		seen[pkg] = true
		imports = append(imports, pkg)
	}
	sort.Strings(imports)
	if len(imports) > 0 {
		fmt.Fprintf(w, "import (\n")
		for _, pkg := range imports {
			fmt.Fprintf(w, "  %q\n", pkg)
		}
		fmt.Fprintf(w, ")\n")
		fmt.Fprintf(w, "\n")
	}
	io.Copy(w, c.w)
	for _, trailer := range c.trailer {
		trailer.writeBody(w)
	}
}

//nolint:errcheck
func (c *Writer) writeBody(w io.Writer) {
	io.Copy(w, c.w)
	for _, trailer := range c.trailer {
		fmt.Fprintln(w, trailer.Body())
	}
}
